# tasks file for ansible-role-raycast-host-editor

# Preparation tasks
- name: Get remote user's primary group
  delegate_to: "{{ host }}"
  ansible.builtin.command: id -gn
  register: remote_group
  changed_when: false

- name: Create Raycast scripts directory if it doesn't exist
  delegate_to: "{{ host }}"
  ansible.builtin.file:
    path: "{{ home }}{{ raycast_scripts_path }}"
    state: directory
    mode: '0755'
    owner: "{{ user }}"
    group: "{{ remote_group.stdout }}"

- name: Find existing Raycast scripts {{ editor_name }}
  delegate_to: "{{ host }}"
  ansible.builtin.find:
    paths: "{{ home }}{{ raycast_scripts_path }}"
    patterns: "{{ editor_alias }}*.sh"
  register: existing_scripts

- name: Create list of valid script names
  delegate_to: "{{ host }}"
  ansible.builtin.set_fact:
    valid_script_names: "{{ ansible_play_hosts_all | map('regex_replace', '^(.*)$', editor_alias + '\\\\\\\\1.sh') | list }}"
    scripts_to_remove: []

- name: Identify obsolete scripts
  delegate_to: "{{ host }}"
  ansible.builtin.set_fact:
    scripts_to_remove: "{{ scripts_to_remove + [item.path] }}"
  loop: "{{ existing_scripts.files }}"
  when: item.path | basename not in valid_script_names
  loop_control:
    label: "{{ item.path | basename }}"

- name: Remove obsolete Raycast scripts {{ editor_name }}
  delegate_to: "{{ host }}"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ scripts_to_remove }}"
  when: scripts_to_remove | length > 0

# Create scripts directly on remote host
- name: Create Raycast scripts directly on remote host
  ansible.builtin.template:
    src: "{{ role_path }}/templates/raycast-hosts-editor.j2"
    dest: "{{ home }}{{ raycast_scripts_path }}/{{ editor_alias }}-{{ item }}.sh"
    mode: '0755'
    owner: "{{ user }}"
    group: "{{ remote_group.stdout }}"
  loop: "{{ ansible_play_hosts_all }}"
  vars:
    hostname: "{{ item }}"
  delegate_to: "{{ host }}"
  notify: Notify scripts created

- name: Verify files on remote host
  delegate_to: "{{ host }}"
  ansible.builtin.find:
    paths: "{{ home }}{{ raycast_scripts_path }}"
    patterns: "{{ editor_alias }}-*.sh"
    file_type: file
  register: remote_files
  changed_when: false

- name: Debug - Show remote files
  ansible.builtin.debug:
    var: remote_files.files | map(attribute='path') | list
  when: debug
